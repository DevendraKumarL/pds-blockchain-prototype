if possible =>
    -> **** change {from: centralGovernmentAddress} of all the transactions to use the address of the actual sender ****
    -> optimize js code and remove unwanted code
    -> write tests for creating central, state government, 2 customers, 3 fps
        -> approve customers and fps
        -> then create fixed & flexi ration cards
        -> central government to provide points for each card
    -> store a global user address for customer **Tick** and fps when only logged-in **Tick**
    -> ** Optimize approvals.js **Tick**
    -> home div for approvals.html **Tick**
    -> remove {from: ...} in .call() method calls
    -> add authentication layer for any new transaction execution
    -> government buys a kg a rice for 26/- and sells it to customer at 1/-
        -> so the contract has to keep tract the foodflow and money from customers
        -> thus track the **BENEFIT FLOW**
        -> make analysis/graph depicting flow of food/benegfit versus amount spent
        -> i.e., is/visualization the amount spent benefitting the customers ??
    -> add Aadhaar number for customers ??
        -> customers and fps can register only if they have aadhaar number and government
        will approve seeing the aadhaar details
    -> How to check if
        *SellToCustomer_HashLog
        *SupplyCentralToStateGovernment_HashLog
        confirmed or not ??
        -> Should it be added to the final transfer log analytics/graph/stats ??
    -> use MetaMask, show individual functionalities of each contract, ideal way of using blockchain
    -> UI
        -> ** Rename paths **
        -> **COLORS**
        -> registration:
            ->customer **Tick**
            ->fps **Tick**
            ->centralGovernment **Tick**
            ->stateGovernment **Tick**
        -> login: **COOKIES**
            ->customer **Tick**
            ->fps **Tick**
            ->centralGovernment **Tick**
            ->stateGovernment **Tick**
        -> approval:
            ->customer and fps (by government) **Tick**
        -> ration card and flexi ration card:
            -> customer after approval **Tick**
            <!-- first check if user is approved if not, then nothing to do --> **Tick**
            <!-- if approved choose between fixed and flexi RationCard --> **Tick**
            <!-- then check for the above choosen card if ration card exists --> **Tick**
            <!-- if exists show details upon *Authentication* --> **Tick**
            <!-- if not exists then take details from customer and create a new one upon *Authentication* --> **Tick**
        -> view ration card points and details: customer (by government)
            -> view fixed scheme ration card points **Tick**
            -> view flexi scheme ration card points **Tick**
            -> give points **Tick**
        -> separate webpage to show testrpc avaiable accounts **Tick**
        -> separate webpage to get info of registered users on pds blockchain using accounts address **Tick**
        -> a modal to authenticate user for making any transaction
        -> dashboard1:
            ->centralGovernment to see registrations, approvals, and
                 to see ration card points and flexi ration card points given (based on budget ??)
        -> food and rupee transaction:
            ->customer
            ->fps
            ->centralGovernment, stateGovernment
            -> DETAILS:
                ...
        -> use bootstrap tables ??
        -> blockchain information
            -> all transactions
            -> web3. ...
            -> web3.eth. ..
            ... ... ... ... ... ... ...
        -> loading overlay when loading any webpage so that all the background loading tasks
            from testrpc are finished before any user action is taken **Tick**
        -> Everything into one page, Generic, possible but leave for now.
        -> how to reload other windows of fps or customer after registration, leave for now
